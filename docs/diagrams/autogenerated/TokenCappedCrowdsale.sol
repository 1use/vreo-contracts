pragma solidity 0.4.24;

import "./BaseCrowdsale.sol";


/// @title TokenCappedCrowdsale
/// @author Autogenerated from a Dia UML diagram
contract TokenCappedCrowdsale is BaseCrowdsale {

    uint public remainingTokens;

    /// @dev Log entry on sold out
    event SoldOut();

    /// @dev Constructor
    /// @param _cap A positive number
    constructor(uint _cap) public {
        require(IMPLEMENTATION);
    }

    /// @dev Tokens available
    /// @param _amount A positive number
    /// @return True or false
    function tokensAvailable(uint _amount) public returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Pre validate purchase
    /// @param _beneficiary An Ethereum address
    /// @param _weiAmount A positive number
    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Deliver tokens
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Process purchase
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _processPurchase(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

}

