pragma solidity 0.4.24;

import "./PostKYCCrowdsale.sol";
import "./TokenCappedCrowdsale.sol";
import "FinalizableCrowdsale.sol";
import "MintedCrowdsale.sol";
import "./VreoTokenBounty.sol";
import "./IconiqInterface.sol";


/// @title VreoTokenSale
/// @author Autogenerated from a Dia UML diagram
contract VreoTokenSale is PostKYCCrowdsale, TokenCappedCrowdsale, FinalizableCrowdsale, MintedCrowdsale {

    uint public TOTAL_TOKEN_CAP_OF_SALE = 450000000e18; // = 450.000.000 e18
    uint public TOKEN_SHARE_OF_TEAM = 85000000e18; // =  85.000.000 e18
    uint public TOKEN_SHARE_OF_ADVISORS = 58000000e18; // =  58.000.000 e18
    uint public TOKEN_SHARE_OF_LEGALS = 57000000e18; // =  57.000.000 e18
    uint public TOKEN_SHARE_OF_BOUNTY = 50000000e18; // =  50.000.000 e18
    uint public KYC_VERIFICATION_PERIOD = 14 days;
    uint public MINIMUM_LIFETIME = 365 days;
    uint public iconiqSaleOpeningTime;
    uint public iconiqSaleClosingTime;
    uint public vreoSaleOpeningTime;
    uint public vreoSaleBonus20EndTime;
    uint public vreoSaleBonus10EndTime;
    uint public vreoSaleClosingTime;
    IconiqInterface public iconiq;
    address public teamAccount;
    address public advisorsAccount;
    address public legalsAccount;
    VreoTokenBounty public bounty;

    /// @dev Log entry on rate changed
    /// @param newRate A positive number
    event RateChanged(uint newRate);

    /// @dev Constructor
    /// @param _token A VreoToken
    /// @param _iconiqSaleOpeningTime A positive number
    /// @param _iconiqSaleClosingTime A positive number
    /// @param _vreoSaleOpeningTime A positive number
    /// @param _vreoSaleBonus20EndTime A positive number
    /// @param _vreoSaleBonus10EndTime A positive number
    /// @param _vreoSaleClosingTime A positive number
    /// @param _rate A positive number
    /// @param _iconiq An IconiqInterface
    /// @param _teamAccount An Ethereum address
    /// @param _advisorsAccount An Ethereum address
    /// @param _legalsAccount An Ethereum address
    /// @param _bounty A VreoTokenBounty
    /// @param _wallet An Ethereum address
    constructor(VreoToken _token, uint _iconiqSaleOpeningTime, uint _iconiqSaleClosingTime, uint _vreoSaleOpeningTime, uint _vreoSaleBonus20EndTime, uint _vreoSaleBonus10EndTime, uint _vreoSaleClosingTime, uint _rate, IconiqInterface _iconiq, address _teamAccount, address _advisorsAccount, address _legalsAccount, VreoTokenBounty _bounty, address _wallet) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_iconiqSaleOpeningTime, _vreoSaleClosingTime) TokenCappedCrowdsale(TOTAL_TOKEN_CAP_OF_SALE) {
        require(IMPLEMENTATION);
    }

    /// @dev Liquidate
    function liquidate() public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Set rate
    /// @param _newRate A positive number
    function setRate(uint _newRate) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Distribute presale
    /// @param _investors A list where each entry is an Ethereum address
    /// @param _amounts A list where each entry is a positive number
    function distributePresale(address[] _investors, uint[] _amounts) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Pre validate purchase
    /// @param _beneficiary An Ethereum address
    /// @param _weiAmount A positive number
    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Get token amount
    /// @param _weiAmount A positive number
    /// @return A positive number
    function _getTokenAmount(uint _weiAmount) internal view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Finalization
    function finalization() internal {
        require(IMPLEMENTATION);
    }

}

