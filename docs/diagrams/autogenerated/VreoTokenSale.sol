pragma solidity 0.4.24;

import "FinalizableCrowdsale.sol";
import "MintedCrowdsale.sol";
import "./VreoTokenBounty.sol";
import "./IconiqInterface.sol";


/// @title VreoTokenSale
/// @author Autogenerated from a Dia UML diagram
contract VreoTokenSale is FinalizableCrowdsale, MintedCrowdsale {

    struct Investment {
        bool isVerified; // wether or not the investor passed the KYC process
        uint value; // invested wei
        uint amount; // amount of token quantums the investor wants to purchase
    }

    uint public TOKEN_SHARE_OF_TEAM = 85000000e18; // =  85.000.000 e18
    uint public TOKEN_SHARE_OF_ADVISORS = 58000000e18; // =  58.000.000 e18
    uint public TOKEN_SHARE_OF_LEGALS = 57000000e18; // =  57.000.000 e18
    uint public TOKEN_SHARE_OF_BOUNTY = 50000000e18; // =  50.000.000 e18
    uint public TOTAL_TOKEN_CAP_OF_SALE = 450000000e18; // = 450.000.000 e18
    uint public EXTRA_TOKEN_PCT_IN_ICONIQ_SALE = 20;
    uint public EXTRA_TOKEN_PCT_IN_VREO_PRESALE = 15;
    uint public MINIMUM_KYC_VERIFICATION_PERIOD = 14 days;
    uint public remainingTokensForSale;
    uint public openingTimeOfIconiqSale;
    uint public closingTimeOfIconiqSale;
    uint public openingTimeOfVreoPresale;
    uint public closingTimeOfVreoPresale;
    uint public openingTimeOfPublicSale;
    uint public closingTimeOfPublicSale;
    IconiqInterface public iconiq;
    address public teamAccount;
    address public advisorsAccount;
    address public legalsAccount;
    VreoTokenBounty public bounty;
    mapping(address => Investment) public investments;

    /// @dev Log entry on rate changed
    /// @param newRate A positive number
    event RateChanged(uint newRate);

    /// @dev Log entry on investor verified
    /// @param investor An Ethereum address
    event InvestorVerified(address investor);

    /// @dev Log entry on investor falsified
    /// @param investor An Ethereum address
    event InvestorFalsified(address investor);

    /// @dev Log entry on tokens delivered
    /// @param investor An Ethereum address
    /// @param amount A positive number
    event TokensDelivered(address investor, uint amount);

    /// @dev Log entry on withdrawn
    /// @param investor An Ethereum address
    /// @param value A positive number
    /// @param amount A positive number
    event Withdrawn(address investor, uint value, uint amount);

    /// @dev Constructor
    /// @param _token A VreoToken
    /// @param _openingTimeOfIconiqSale A positive number
    /// @param _closingTimeOfIconiqSale A positive number
    /// @param _openingTimeOfVreoPresale A positive number
    /// @param _closingTimeOfVreoPresale A positive number
    /// @param _openingTimeOfPublicSale A positive number
    /// @param _closingTimeOfPublicSale A positive number
    /// @param _rate A positive number
    /// @param _iconiq An IconiqInterface
    /// @param _teamAccount An Ethereum address
    /// @param _advisorsAccount An Ethereum address
    /// @param _legalsAccount An Ethereum address
    /// @param _bounty A VreoTokenBounty
    /// @param _wallet An Ethereum address
    constructor(VreoToken _token, uint _openingTimeOfIconiqSale, uint _closingTimeOfIconiqSale, uint _openingTimeOfVreoPresale, uint _closingTimeOfVreoPresale, uint _openingTimeOfPublicSale, uint _closingTimeOfPublicSale, uint _rate, IconiqInterface _iconiq, address _teamAccount, address _advisorsAccount, address _legalsAccount, VreoTokenBounty _bounty, address _wallet) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTimeOfIconiqSale, _closingTimeOfPublicSale) {
        require(IMPLEMENTATION);
    }

    /// @dev Destroy
    function destroy() public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Set rate
    /// @param _newRate A positive number
    function setRate(uint _newRate) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Verify investors
    /// @param _investors A list where each entry is an Ethereum address
    function verifyInvestors(address[] _investors) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Falsify investors
    /// @param _investors A list where each entry is an Ethereum address
    function falsifyInvestors(address[] _investors) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Withdraw
    function withdraw() public {
        require(IMPLEMENTATION);
    }

    /// @dev Fulfil investment
    /// @param _investor An Ethereum address
    /// @param _investment An Investment
    function fulfilInvestment(address _investor, Investment _investment) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Pre validate purchase
    /// @param _beneficiary An Ethereum address
    /// @param _weiAmount A positive number
    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Post validate purchase
    /// @param _beneficiary An Ethereum address
    /// @param _weiAmount A positive number
    function _postValidatePurchase(address _beneficiary, uint _weiAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Deliver tokens
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Process purchase
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _processPurchase(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Update purchasing state
    /// @param _beneficiary An Ethereum address
    /// @param _weiAmount A positive number
    function _updatePurchasingState(address _beneficiary, uint _weiAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Get token amount
    /// @param _weiAmount A positive number
    /// @return A positive number
    function _getTokenAmount(uint _weiAmount) internal view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Forward funds
    function _forwardFunds() internal {
        require(IMPLEMENTATION);
    }

    /// @dev Finalization
    function finalization() internal {
        require(IMPLEMENTATION);
    }

}

