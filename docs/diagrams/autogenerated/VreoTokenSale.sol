pragma solidity 0.4.24;

import "./PostKYCCrowdsale.sol";
import "FinalizableCrowdsale.sol";
import "MintedCrowdsale.sol";
import "IconiqToken.sol";


/// @title VreoTokenSale
/// @author Autogenerated from a Dia UML diagram
contract VreoTokenSale is PostKYCCrowdsale, FinalizableCrowdsale, MintedCrowdsale {

    uint public TOTAL_TOKEN_CAP_OF_SALE = 450000000e18; // = 450.000.000 e18
    uint public TOKEN_SHARE_OF_TEAM = 85000000e18; // =  85.000.000 e18
    uint public TOKEN_SHARE_OF_ADVISORS = 58000000e18; // =  58.000.000 e18
    uint public TOKEN_SHARE_OF_LEGALS = 57000000e18; // =  57.000.000 e18
    uint public TOKEN_SHARE_OF_BOUNTY = 50000000e18; // =  50.000.000 e18
    uint public BONUS_PCT_IN_ICONIQ_SALE = 20;
    uint public BONUS_PCT_IN_VREO_SALE_PHASE_1 = 20;
    uint public BONUS_PCT_IN_VREO_SALE_PHASE_2 = 10;
    uint public ICONIQ_SALE_OPENING_TIME = 1530432000; // 2018-07-01 10:00:00 CEST
    uint public ICONIQ_SALE_CLOSING_TIME = 1531598400; // 2018-07-14 22:00:00 CEST
    uint public VREO_SALE_OPENING_TIME  = 1532160000; // 2018-07-21 10:00:00 CEST
    uint public VREO_SALE_PHASE_1_END_TIME = 1532462400; // 2018-07-24 22:00:00 CEST
    uint public VREO_SALE_PHASE_2_END_TIME = 1533153600; // 2018-08-01 22:00:00 CEST
    uint public VREO_SALE_CLOSING_TIME = 1534622400; // 2018-08-18 22:00:00 CEST
    uint public KYC_VERIFICATION_END_TIME = 1535832000; // 2018-09-01 22:00:00 CEST
    uint public WEI_INVESTABLE_PER_ICONIQTOKEN = 1000; // TBD
    ERC20Basic public iconiqToken;
    address public teamAddress;
    address public advisorsAddress;
    address public legalsAddress;
    address public bountyAddress;
    uint public remainingTokensForSale;

    /// @dev Log entry on rate changed
    /// @param newRate A positive number
    event RateChanged(uint newRate);

    /// @dev Constructor
    /// @param _token A VreoToken
    /// @param _rate A positive number
    /// @param _iconiqToken An ERC20Basic
    /// @param _teamAddress An Ethereum address
    /// @param _advisorsAddress An Ethereum address
    /// @param _legalsAddress An Ethereum address
    /// @param _bountyAddress An Ethereum address
    /// @param _wallet An Ethereum address
    constructor(VreoToken _token, uint _rate, ERC20Basic _iconiqToken, address _teamAddress, address _advisorsAddress, address _legalsAddress, address _bountyAddress, address _wallet) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(ICONIQ_SALE_OPENING_TIME, VREO_SALE_CLOSING_TIME) {
        require(IMPLEMENTATION);
    }

    /// @dev Distribute presale
    /// @param _investors A list where each entry is an Ethereum address
    /// @param _amounts A list where each entry is a positive number
    function distributePresale(address[] _investors, uint[] _amounts) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Set rate
    /// @param _newRate A positive number
    function setRate(uint _newRate) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Withdraw investment
    function withdrawInvestment() public {
        require(IMPLEMENTATION);
    }

    /// @dev Iconiq sale ongoing
    /// @return True or false
    function iconiqSaleOngoing() public view returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Vreo sale ongoing
    /// @return True or false
    function vreoSaleOngoing() public view returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Get iconiq max investment
    /// @param _investor An Ethereum address
    /// @return A positive number
    function getIconiqMaxInvestment(address _investor) public view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Pre validate purchase
    /// @param _beneficiary An Ethereum address
    /// @param _weiAmount A positive number
    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Get token amount
    /// @param _weiAmount A positive number
    /// @return A positive number
    function _getTokenAmount(uint _weiAmount) internal view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Deliver tokens
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Finalization
    function finalization() internal {
        require(IMPLEMENTATION);
    }

}

